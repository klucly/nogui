{'objlist': {'Undefined 0': {'rotation': 5}, 'Undefined 1': {}, 'Circle 2': {}, 'Circle 3': {}}, 'files': {'file-0': 'from math import acos, acosh, asin, cos, degrees, dist, radians, sin, sqrt\nfrom typing import Union\nimport nogui\nfrom nogui import Vec2, Matrix, collision, press\nimport math\n\n\nclass Vector:\n\n    def __init__(self, matrix: Matrix, coords: Vec2, direction: Union[int, float] = 0, lenght: Union[int, float] = 10, symbol: str = "#", fixed_out: bool = False) -> None:\n        self.coords = coords\n        self.matrix = matrix\n        self.direction = direction\n        self.lenght = lenght\n        self.symbol = symbol\n        self.fixed_out = fixed_out\n        \n\n    def update(self, show: bool = True) -> tuple:\n\n        point1 = self.coords\n\n        xlenght = math.cos(math.radians(self.direction))*self.lenght\n        ylenght = math.sin(math.radians(self.direction))*self.lenght/(1.9 if self.fixed_out else 1)\n        lenghtxy = Vec2(xlenght, ylenght)\n\n        point2 = lenghtxy+self.coords\n\n        if show:\n            for coords in nogui.Polygon.get_line(None, [point1, point2]):\n                if min(coords>=0):\n                    try: self.matrix.matrix[coords[1]][coords[0]] = self.symbol\n                    except IndexError: pass\n\n        return point1, point2\n\nclass Camera:\n\n    def __repr__(self) -> str: return "rayc.Camera"\n\n    def __init__(self, main, i_count = 5, coords: Vec2 = Vec2(0), resolution: int = 10, viewing_angle: int = 60, rotation: int = 0, **args) -> None:\n\n        self._main = main\n        self.matrix = main.matrix\n        self.coords = coords\n        self.i_count = i_count\n        self.show_rays = False\n        self._objectlist = main.objectlist\n        self.resolution = resolution\n        self.rotation = rotation\n        self.viewing_angle = viewing_angle\n        self.attr = {}\n        self._vectors = []\n        self._vectors.append(Vector(main.matrix, self.coords, rotation-viewing_angle/2, 5, "H"))\n        self._vectors.append(Vector(main.matrix, self.coords, rotation+viewing_angle/2, 5, "H"))\n\n        if "symbol" in args: self.symbol = args["symbol"]\n        else: self.symbol = "#"\n        if "size" in args: self.size = args["size"]\n        else: self.size = 5\n        if "output_coords" in args: self.output_size = args["output_coords"]\n        else: self.output_coords = Vec2(0)\n        if "output_weight" in args: self.output_size = args["output_weight"]\n        else: self.output_weight = 2\n\n\n    def draw(self) -> None:\n        output = []\n        distances = {}\n        _distances = {}\n        coords_list = []\n        ray_num = 0\n\n        for vector in self._vectors:\n            vector.direction = self.rotation+(self.viewing_angle/2*(-1)**self._vectors.index(vector))\n            vector.lenght = self.size\n            vector.symbol = self.symbol\n            vector.coords = self.coords\n            vector.update()\n\n        for ray_direction in range(self.rotation-self.viewing_angle//2, self.rotation+self.viewing_angle//2, round(self.viewing_angle/self.resolution)):\n            coords = self.coords\n            stop = False\n            \n            for i in range(self.i_count):\n\n                for obj in self._objectlist:\n                    if obj.__class__ == nogui.Circle:\n                        distancex, distancey = coords-obj.coords\n                        distance = sqrt(distancex**2+distancey**2)-obj.radius\n                        distances[distance] = obj\n                # print(distances, 1)\n\n                if distances != {} and not stop:\n                    lenght = min(distances)\n                    coords = Vector(self.matrix, coords, ray_direction, lenght, f"{i}").update(self.show_rays)[1]\n                    \n                    if (coords[0] > self.matrix.size[0] or coords[1] > self.matrix.size[1]\n                        or coords[0] < 0 or coords[1] < 0):\n                        stop = True\n                        output.append(False)\n\n                    elif lenght < 1:\n                        stop = True\n                        output.append(True)\n\n                    _distances[ray_num] = distances[lenght]\n                    distances = {}\n\n            if not stop: output.append(False)\n            coords_list.append(coords)\n            ray_num += 1\n\n\n        for i in range(len(output)):\n            for w in range(self.output_weight):\n                try:\n                    obj = _distances[i]\n                    # if nogui.press("k"):\n                    if output[i]: self.matrix.matrix[i+self.output_coords[1]][self.output_coords[w+self.output_coords[0]]] = shader(self._main, obj, coords_list[i])\n                    else: self.matrix.matrix[i+self.output_coords[1]][self.output_coords[w+self.output_coords[0]]] = " "\n                except: ...\n\n    def rotate_to_mouse(self, main):\n        mouse_coords = Vec2(self.matrix.mouse_coords())\n\n        distanceX, distanceY = self.coords-mouse_coords\n        distance = sqrt(distanceX**2+distanceY**2)\n        angle = math.degrees(math.asin(distanceX/distance)) * (-1 if distanceY >= 0 else 1) + (0 if distanceY >= 0 else 180) - 90\n        main.command(f"c 0.rotation {round(angle)}")\n\n\n            \nclass Nothing:\n    def __repr__(self) -> str: return "nothing"\n\n\ndef shader(main, obj, coords) -> str:\n    distanceX, distanceY = main.objectlist[0].coords-obj.coords\n    distance = sqrt(distanceX**2+distanceY**2)\n    \n    return str(round(distance/3))[-1]\n\n\n\ndef start(main):\n    main.objectlist = []\n    main.objectlist = [Camera(main, 5, Vec2(4, 4), 20, 60, 1, size = 5), Nothing()]\n    main.command("add circle 25 10 3 K")\n    main.command("add circle 30 1 2 K")\n    main.objectlist[0]._objectlist = main.objectlist\n\ndef loop(main):\n    coords = main.objectlist[0].coords\n    try:\n        if nogui.press("d"):\n            main.command("c 0.coords "+str(Vec2(coords[0]+1, coords[1])).replace(" ", ""))\n        elif nogui.press("a"):\n            main.command("c 0.coords "+str(Vec2(coords[0]-1, coords[1])).replace(" ", ""))\n    except: ...\n    try:\n        if nogui.press("w"):\n            main.command("c 0.coords "+str(Vec2(coords[0], coords[1]-1)).replace(" ", ""))\n        elif nogui.press("s"):\n            main.command("c 0.coords "+str(Vec2(coords[0], coords[1]+1)).replace(" ", ""))\n    except: ...\n\n    try: main.objectlist[0].rotate_to_mouse(main)\n    except: pass'}, 'win_size': (40, 20), 'win_bg': '.'}